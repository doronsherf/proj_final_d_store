ng serve --proxy-config proxy.conf.json  
nodemon index.js

******************************************************************
*                                                                *
*			           TECHNOLOGIES REVIEW	            	     *
*			           FOR PROGRAMER    	            	     *
*  			            						               	 *
******************************************************************
for installing and running instractions see file: 
OPERATING INSTRACTIONS



Technologies Used: SEAN    
************************
	SEAN: S-SQL(MySql) + E-ExpressJS + A-Angular + N-NodeJS.
	full stack javascript web development
	
	Using Node.js framework + ExpressJS packags for backend(server side)
	Using ANGULAR 8 for the frontend (client side)
	using MySql Database

Technologies Background
************************
	1.	NodeJS, is the runtime environment of the backend of the app. 
	2.	ExpressJS is a web framework for NodeJS, used as the backend for the app. ExpressJS works as middleware which create the RESTful API.
	3. RESTful API : REST (REpresentational State Transfer) API (Application Program Interface): API generat HTTP requests by using HTTP methods (GET,PUT,POST and DELETE)

BEFORE RUNING INSTRUCTIONS Build the DataBase
**********************************************
	Creating the DB(database) + its tables can is done automaticly by the program (in:db_config.js)

	If you like, you can manually enter initial data to DB
	fot manually enter initial data do the folowing: 

	1	Open XAMPP Contol Panel
	2 	Start Apache Moudule
	3 	Start MySql Moudule - The DB start run on port: 3306
	4	Open browser at http://localhost/phpmyadmin
	5 	directly paste the info from ds_db.sql  
	 OR 
	6 	Import file :   
		6.1  open SQL section (choose SQL from upper bar)
		6.2  Paste all taxt copied info from ds_db.sql  
		6.3  push excute (ביצוע)btn 

	 

PROJECT RUN INSTRACTIONS 
***************************
	1. Run the DB server side (localhost:3010):
		C:\project_folder>backend> nodemon index.js
	2. Run theserver again(to insert constraint values)
		C:\project_folder>backend> rs
			
	3. Run the angular client side (degault: localhost:4200):
		C:\project_folder\frontend> ng serve --proxy-config proxy.conf.json  // C:\project_folder\frontend> ng serve --port 4210 

 
PROXY SERVER TO PREVENT CORS VIOLATION IN ANGULAR APP
******************************************************
	IN DEVELOPMENT STAGE: PROXY SERVER TO PREVENT CORS VIOLATION 
		source: https://medium.com/better-programming/setup-a-proxy-for-api-calls-for-your-angular-cli-app-6566c02a8c4d
		create a PROXY SERVER on PORT 4200 to be used for dev stage while using ANGULAR CLI (which use webpack-dev-server):
	IN PRODUCTION STAGE: SETTING UP A Nginx server
		for production need to set up Nginx server (for reverse-proxy).
		see:
		https://medium.com/@spencerfeng/setup-reverse-proxy-for-api-calls-for-your-angular-application-with-node-js-62321f0defb5

PROJECT CONFIG PART1 : SERVER(the backend) 
***********************************************

	1. Create backend FOLDER			
		C:\project_folder> md backend
		C:\project_folder> cd backend	
		
	2. npm init
		C:\project_folder\backend> npm init
		// creat package.json with basic default declrations. (Will contain scriptes and dependencies of future installations)
	3. express
		C:\project_folder\backend> npm i express 
		// install 'express' package - created the node modoules

	4. CORS  instaling the express cors package
		C:\project_folder\backend> npm i cors 
	5. 	BODY PARSER
		body-parser is a node.js middleware for handling JSON, Raw, Text and URL encoded form data.
		C:\project_folder\backend> npm install body-parser
	6.  to create from JSON string a x-www-form-urlencoded. (this enable to pass request body in the URL)			
		C:\project_folder\backend> npm i querystring

	7. starting the DB: 
		A. start mysql server
			(1.open XAMPP 2.start Apachi 3. start MySQL)
		B. in Command Terminal
			C:\project_folder\backend>npm install mysql 
	8. install nodemon - needed only once to install nodemon globally: 
		C:\project_folder\backend> npm install -g nodemon 
	
	9. Run the project (DB server side)
		C:\project_folder\backend> nodemon index.js
		Run the project. automatic restart the node application whenever index.js is changed(while developing). 

PROJECT CONFIG PART 2: ANGULAR CLIENT (the frontkend)
******************************************************
	C:\project_folder\frontend>ng serve --port 4210
		later:  ng serve --proxy-config proxy.conf.json

	1. CREATE ANGULR CLIENT 
		C:\project_folder> ng new frontend
		// angulr CLI build new folder for the new angular project (to do the client programing)

	2. CREATE A PROXY SERVER TO PREVENT CORS ERROR* (see more info on PART 3: PROXY SERVER TO PREVENT CORS VILOATION) 
		source: https://medium.com/better-programming/setup-a-proxy-for-api-calls-for-your-angular-cli-app-6566c02a8c4d
		for production need to set up Nginx server (for reverse-proxy). seehttps://medium.com/@spencerfeng/setup-reverse-proxy-for-api-calls-for-your-angular-application-with-node-js-62321f0defb5
		create a PROXY SERVER on PORT 4200 to be used for dev stage while using ANGULAR CLI (which use webpack-dev-server)
		2.1 Create 'proxy.conf.json' file (next to client package.json)
		2.2 Change package.json file ("start": "ng serve --proxy-config proxy.conf.json",)
		2.3 insert the "/api" link declaration to  "target": "http://localhost:3010"
		2.4 Relaunch 'npm start', to make changes effective:
			C:\project_folder/frontend>npm start

	3. CLIENT (BACKEND) MAIN FOLDERS
		3.1	C:\project_folder/frontend/src/app / components 	//CREATE by CLI (ng commands) 
		3.2	C:\project_folder/frontend/src/app / services		//CREATE by CLI (ng commands) 
		3.3	C:\project_folder/frontend/src/app /  models		//CREATE by CLI (ng commands)
		3.4	C:\project_folder/frontend/src/app / assets/products_images	//CREATE directly
		3.5	C:\project_folder/frontend/src/app / assets/store_images 	//CREATE directly
		
	4. Generate the components	
	**DONT FORGET TO MOVE TO THE NEW frontend FOLDER			
	C:\project_folder> cd frontend
		1. C:\project_folder\frontend> ng g c components/header
		2. C:\project_folder\frontend> ng g c components/home
		3. C:\project_folder\frontend> ng g c components/login
		4. C:\project_folder\frontend> ng g c components/store_info
		5. C:\project_folder\frontend> ng g c components/signin
		6. C:\project_folder\frontend> ng g c components/shopping
		7. C:\project_folder\frontend> ng g c components/products
	 	8. C:\project_folder\frontend> ng g c components/product 
		9. C:\project_folder\frontend> ng g c components/cart
		10.C:\project_folder\frontend> ng g c components/admin
		11.C:\project_folder\frontend> ng g c components/order
		12.C:\project_folder\frontend> ng g c components/users
		13.C:\project_folder\frontend> ng g c components/admin_prod
		14.C:\project_folder\frontend> ng g c components/relogin
		15.C:\project_folder\frontend> ng g c components/paypal_checkout
		

		OR generates all in 1 command:  C:\project_folder\frontend> for %n in (home, login, store_info, signin, products, cart,order ,users ) do ng g c components/%n

	3. Generate the Services
		** inserting each service to a folder to include 2 files(service.ts+ service.spec.ts)
		C:\project_folder\frontend> ng g s services/products/products  
		C:\project_folder\frontend> ng g s services/prod_types/prod_types  
		C:\project_folder\frontend> ng g s services/signin/signin  
		C:\project_folder\frontend> ng g s services/login/login  
		C:\project_folder\frontend> ng g s services/users/users  
		C:\project_folder\frontend> ng g s services/addresses/addresses
		C:\project_folder\frontend> ng g s services/carts/carts
		C:\project_folder\frontend> ng g s services/orders/orders

	4. create models
		C:\project_folder\frontend> ng g class models/user
		C:\project_folder\frontend> ng g class models/product
		C:\project_folder\frontend> ng g class models/cart_items
		C:\project_folder\frontend> ng g class models/cart
		C:\project_folder\frontend> ng g class models/order

	5. create Interceptors 
		C:\project_folder\frontend> ng g class helpers/auth.interceptor 
		C:\project_folder\frontend> ng g class helpers/error.interceptor (token expired) + (unauthorised for this info)

	6. 	UPDATE app.modoules.ts httpClientModule+Services+models:
		Injecting each service and class to the constractor
			import {httpClientModule} from '@angular/common/http'; 

			add to imports: [...httpClientModule]

	7. BIND THE MAIN COMPONENT TO SUB COMPONENTS 
		USE: INTERNAL PATHES(linking betwin components)
		usualy the main component(app.component.html) contain a nav-bar
		A. in: app-routing.module declair routes to 'home','login' ets. to the acting component
		B. In 'app.component.html' creat nav-bar or buttons routerLink

	8. Run ANGULAR CLI (dev. mode)
		C:\project_folder\frontend> ng serve --proxy-config proxy.conf.json
		C:\project_folder\frontend> ng s -o 

SECURITY
***************************
in this project 5 security subjects:
	1. bcrypt Password Encoding: for server<->DB(DataBase) Password saving/retrieving  
	2. JWT - JSON Web Tokens for client<->server interactions
	3. Block Un listed routs - in the server 
	4. Auth(authentication) interceptor: watch client->server requests.Add JWT to all requests
	5. Error Interceptor: watch server->client replyes. 
		5.1 Catch 'Token Expired' errors and give the user gentel feedback(please Re-Login...)
		5.2 Catch 'unauthorised' activites and block them
	* Note about  angular 'route guards':
	 in this project we are NOT authenticating user in the Client side when routing between components. e.g. we dont block client side routing by using angular 'route guards'. The resons for that:  
	  a) One can bypass this client side authentication check using browser dev tools and by manually add a currentUser info (user object, loginer_id etc.) to session storage. Doing it would enable him routing between client side components. if these components use data from cash memory, no harm is done. but if this component execute server api routing to recieve new data  or update/delete server data  the server would block that requests because of JWT mismatch(see b) ). 	
	  b) in this app the server side would block access to any real secure data from server. The server provid restricted data only if valid token (JWT) was attached to the request. 

	BCRYPT + SALT
	***************************
		The process how bcrypt + salt works
		1. In the client side:  user signin, creates an account (creates a password).
		2. In server: when signin, before storing the user info to DB,bcrypt works in 2 steps 
			A) Generate the salt first 
			B) hash(encode) the password+salt 
		3. after the hash is generated (by bcrypt.hash) the server post to save the user info in the DB. "the hash" is stored as the user_pwd. the plain-text password (unencrypted) never written to the DB.
		3.	When user login, the password he login is checked against the hash(retrieved from DB). this check is handeled by bcrypt.compare.
		4.	If the hashes match, the user access is granted. If not, the user is told they entered invalid login credentials.
		5.  after the user access is granted, the second step of JWT begins: server create a JWT and send it to the client app.(see next part: "JWT").

	JWT - JSON Web Tokens
	***************************
		* in this project the authentication of JWT is handeled by the same server. e.g. no separate authentication server is operating in between client->server data flow(requests&replies)
	BEFORE JWT generated:
		1. user login, the server recieve the credentials: user_id + password. 
		2. The server check credentiales (id + password):
			2.1 chek id: if user_id exists in users table in DB, do 'compare':
			2.2 compare: the password the user just loged in is in plaintext, and therefor its NOT matching "the hash" which is stored in the DB. So we use bcrypt.compare to check if current login password is identical to the password was encoded into the hash when the hash was generated (in signin or in previous autorized "password change"). 
	The process how JWT generated: 
		3.  in any login session, after the user access is granted (If "chek & compsre" is successful), the server creates and send the JWT using jsonwebtoken.sign()
			3.1 The server encodes user_id + user_type into a JSON string. 
			3.2 The string sealed using a secret key.(This is the JWT.)  
			3.3 The JWT is sent back to the client
	How JWT is used:
		4. during the user session, the client include the JWT in the header(req.clone) of all its requests (besides signin&login requests)
		5. server checks any request before handling the request: 
			5.1 server validate that JWT is attached to the request
			5.2 and that the attached JWT is realy the appropriate key by jsonwebtoken.verify() 
			5.3 server extract from the incoming token the user level(regular/admin_lo/admin_hi)
			5.4 server validate for any incoming request that URL(rout) is open to the the user level 

	Key terms:
		1. hash function - cryptographic hash function (CHF) - a mathematical algorithm of one-way function(cannot be reversed) that maps string of any size ("the password") to a fixed size string (the "hash value"/"the hash")
		2.bcrypt- is a password hashing function. using bcrypt is a secured way to save the hashes ("hashed password") instead of original passwords in the database
		3.salt- random bytes string. bcrypt combin "salt bytes" with the password before hashing. If 2 users have the same password, with salt, they will not have identical hashed password. This defend from rainbow table attacks: the attacker have table of many hashes of common passwords which were not added random salt. Default saltRounds value is 10. The higher this number is, the longer it takes for the machine to calculate the hash associated with the password, and the amount of combinations of possible hashes is bigger and demanding more trial of hashes for hacker who tries to breake in by trying all possible hashes.

		4. JWT (in this project): A string of type: 'Bearer Token'. contain 3 elements: 1.identifies the user(user_id) + 2. defines this user session(usualy expire time stamp). 3. user_type (regular/admin 1/2)

		6. private key - must be used to sign the JWT. private key is stored in the server.
	

	Instalations on SERVER Side:
		1. Installing bcrypt: to hash passwords
			C:\project_folder\backend> npm i --save bcryptjs 
		2. Installing JWT to handle server side 
			C:\project_folder\backend> npm i jsonwebtoken
		3. Uses already installed express pakeges:(express, body-parser) if not install also
			C:\project_folder\backend> npm i express body-parser 

	Instalations on CLIENT Side:
		1. C:\project_folder\frontend>npm install @auth0/angular-jwt --save
		
	Block Un listed routs (Black/white list)
	*****************************************
		In the server, in the last Middleware function (Check All requests). Prevent execution of routs that do not belong to 1 of the 4 legitimate access lists (free_routes, user routs, admin1 and admin2 routs)

USING EventEmitter in home component
*****************************************
(from 2 children to parent and parent share info to its 3 children). 
login component + signin component + store_info are all childs of home component. login comp and signin comp shar the same DOM element. In home component (the parent) 2 boolean variables (show_signin, show_login) determins which of the component to be displayed. the changing of 'show_signin'+'show_login' from the child transmitted to the parent via 2 EventEmitters. 'turn_on_signin_comp'+'turn_on_lognin_comp' are the EventEmitters. they are changed inside the children component and thier changed value udate the values of show_signin/show_login in the parent comp.

USING BehaviorSubject to share data between 2 components via service
between login component to store-info component via users service
*****************************************
in the service: 
	1. declairing event that will contain the value we want to pass to another component. we declair: 
	private event_with_the_value_of_loginer = new BehaviorSubject(this.loginer)
	private event_with_value_of_prod2add2cart = new BehaviorSubject(this.prod2add2cart)
	2.we put the event(which is the BehaviorSubject) with .next(...) in a function. when the function has a value we want to pass on the event is trigered. the event value is the value that is inside the brackets the '...' 
	this.event_with_value_of_prod2add2cart.next(this.prod2add2cart)
	3. we declair an Observable. the Observable work in a way that we asign a value into it. when ever the value is changed the   

to excute we call a function in the service that call ....

***---***
	private event_with_the_value_of_loginer = new BehaviorSubject<User>(this.loginer)
	private event_with_the_value_of_loginer_pr_name = new BehaviorSubject(this.loginer_pr_name)

	loginer_as_observable: Observable<User> = this.event_with_the_value_of_loginer.asObservable();
	loginer_pr_name_as_observable = this.event_with_the_value_of_loginer_pr_name.asObservable();
	this.event_with_the_value_of_loginer.next( this.loginer)
	this.event_with_the_value_of_loginer_pr_name.next( this.loginer.user_pr_name)

simple way to share data between 2 components turning one component to a provider of another component
data from products component to cart component XXX this way does NOT updat values
(of activ_cart) in cart comp
***********************************************
	setup include 3 steps:
		1. bind to the other compon
		   import { CartComponent } from 'src/app/components/cart/cart.component';
		2. declair in providers: 
		   providers:[CartComponent]
		3. declair in constructor: 
		   constructor(public cart_comp:CartComponent,...)
	usage can be: 1.to transfer value or 2.to triger event or 3.both to triger event with value 
		1. updating data in the other component:		
		   this.cart_comp.the_product2add2cart = prod;
		2. executing a function:
		   this.cart_comp.do_something_in_cart_component();
		3. executing a function with values:   
		   this.cart_comp.add_cart_item(product_id);

USING EventEmitter TO EXECUTE FUNCTION IN COMPONENT FROM ANOTHER COMPONENT
execute add_cart_item of cart component from btn in products component
*********************************************************************************
	1. in products service declairing EventEmitter:
		1.1 triger_add_cart_item_of_cart_comp = new EventEmitter();
		1.2	ev_emitr2add_itm(itm:CartItem){ triger_add_cart_item_of_cart_comp.emit(itm)}
	2. in products component: conecting to the EventEmitter:
		this.products_srvc.ev_emitr2add_itm(cart_item_with_product_info);
	3. in carts component: we subscribe to the EventEmitter:
		products_srvc.
	


Interceptors: how to add
******************************************************************
	in this project we add few interceptors.  
	1. auth.interceptor.ts
	2. errors.interceptor.ts
	
	steps for seting the interceptors:
	build the interceptor and includ provider definition at the intercectore bottom

	2.register each interceptor provider in app.moudules.ts
		2.1 import the interceptore provider (not the interceptor class)
		2.2 add the interceptore-provider name to the providers list (along with the app services).


REMARKS FOR REAL LIFE  
**********************
	1.DATABASE TECHNOLOGY
		1.1 when useing MySQL (instead of SQL) you loose the important functionality of SET DEFAULT in case of 'parent-child' relationship between 2 tables (When using FOREIGN KEY or REFERENCES). SQL allows the developer to specify a value to which to set the foreign key column(s) on an UPDATE or a DELETE. if you want when DELETE a record on the parent table to ghange all the child records in the child table to set the value of the referenced lines to "deleted" or "no longer in the list".MySQL does not supports it! (in MySQL you can set the value to NULL, which you loos info).
		1.2 it is better not to "delete" oprations of records in tables like users, products ets. it is better to update them using a distinctive information, like, "deleted" coulmn and/or change the values, addin 'deleted' to all/some string values and change to negative all/some number values.   

PROJECT CONFIG PART 4: PrimeNG 
******************************************************
	PrimeNG Angular UI(User Interface) responsive components library - is used for the design of this project
	1. BRING PrimeNG INFRASTRUCTURE INTO THE PROJECT
	   (It creats new 2 folders in 'node_modules' and add 2 dependencies in 'package.json') 
			C:\project_folder\frontend> npm install primeng --save
			C:\project_folder\frontend> npm install primeicons --save
			C:\project_folder\frontend> npm install primeflex --save
		
	2. BRING ANGULAR components INTO THE PROJECT:
		C:\project_folder\frontend> npm install @angular/animations    
		C:\project_folder\frontend> npm install @angular/cdk --save  // enable Dropdown input boxes
	3. BRING external CSS INTO THE PROJECT
		C:\project_folder\frontend> npm install font-awesome --save   
	4.		UPDATE ANGULAR COMPONENTS WITH THE IMPORTED ELEMENTS:
		4.1  Add to 'angular.json' add into the "styles": array[...,...,...] 
			"./node_modules/font-awesome/css/font-awesome.min.css",
			"./node_modules/primeicons/primeicons.css",
			"./node_modules/primeng/resources/themes/nova-light/theme.css"
			"./node_modules/primeng/resources/primeng.min.css"
			"./node_modules/primeflex/primeflex.css"
		]
		4.2 ADD TO 'app.module.ts':
			A. IN IMPORTS BLOCK:
				import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
				import { FormsModule } from '@angular/forms';
				import {TableModule} from 'primeng/table';
				import {ButtonModule} from 'primeng/button';
				import {DialogModule} from 'primeng/dialog'; 

			B. ADD INTO @NgModule imports array[...,...,...] 
				@NgModule({ ... imports: [..., BrowserAnimationsModule, TableModule, ButtonModule, DialogModule ]
		4.3 ADD TO  'styles.css'
			@import '../node_modules/font-awesome/css/font-awesome.min';
			@import '../node_modules/primeicons/primeicons.css';
			@import '../node_modules/primeng/resources/themes/nova-light/theme.css';
			@import '../node_modules/primeng/resources/primeng.min.css';
			@import'../node_modules/primeflex/primeflex.css';
		

PROJECT CONFIG PART 5: EXPORT TO CSV XLSC PDF
******************************************************
	1. BRING INFRASTRUCTURE (external LIBRARIES) INTO THE PROJECT
		C:\project_folder\frontend> npm install file-saver  --save
		C:\project_folder\frontend> npm install xlsx  --save
			// (It creats new ?? folders in 'node_modules' and add ??? dependencies in 'package.json') 


IMPORT FILE PROJECT
********************************************************
	
1. Open   אתר מאגרי המידע הממשלתיים	  from: https://data.gov.il/dataset/israel-streets-synom  
2. Download file: rechovot_2_20190612.csv
3. Open with 'OpenOficceCalc' the file and export it to (save as): csv with utf8 format (saved as: 'rechovot_2_20190612-utf8.csv')
4. create table in DB  CREATE TABLE `rehovot` ( `region_code` int(10) NOT NULL,`region_name` varchar(32) NOT NULL... see in DB file
5. IMPORT FILR TO THE DB:
	LOAD DATA INFILE 'c:/dor21_dstore/DB/rechovot_2_20190612-utf8.csv'
	INTO TABLE rehovot 
	FIELDS TERMINATED BY ',' 
	ENCLOSED BY '"'
	LINES TERMINATED BY '\n'
	IGNORE 1 ROWS;

  `city_code` int(32) NOT NULL,
  `city_name` varchar(128) NOT NULL,
  `street_code` int(32) NOT NULL,
  `street_name` varchar(128) NOT NULL,
  `street_name_status` varchar(64) NOT NULL,
  `official_code` int(32) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


IMPORT FILE rechovot_2_20190612.csv from site : https://data.gov.il/dataset/israel-streets-synom
********************************************************	


GIT:  versions control system
**************************** 
1. git init	
	C:\project_folder> git init
	// Create a repository for the project: Creates '.git' folder inside the project folder 
	( In this case: C:\dor12_proj_family_tasks00\family_tasks00> git init )
2. 	git status
	C:\project_folder> git status
	// to see what files were changed since the priviouse "git add".
	// RED : files were not yet added to the commit = were not yet STAGED) 
	// Green: files were STAGED (added to the commit) 
3.	git add .
	C:\project_folder>git add .
	// Tell Git which files to include in the commit Object. But do not buils the new commit object!
	
4	git commit -m
	C:\project_folder> git commit -m "<your_message>"
	// Add all modified and new files, that were added(by add command) to new Commit Object.
* 	* Commit Object contains: 
	1) Changes that have been made in the project files 2) References to parent commit objects. 3) SHA1 name: commit object name
	
5. git log --oneline
	C:\project_folder> git log --oneline
	// showing  all commits - each commit in a single line


6. 	A.CREATE A NEW REMOTE REPOSITORY  - NEEDED ONLY ONE TIME:
	(in git service provider such as: github.com,  Bitbucket)
	C:\project_folder> git remote add origin [remote-repository-link] 
	C:\project_folder> git remote add origin https://github.com/doronsherf/testin_repository.git

	B. PUSH TO REMOTE REPOSITORY ONLY THE FIRST TIME:
	C:\project_folder> git push -u origin master

7. 	git push --all after 
	C:\project_folder> git push --all
	// sending the commits to be stored in the REMOTE REPOSITORY (www.github.com)


	git checkout master

PAYPAL
****************************************
Sandbox account: 	sb-g664p1178552@business.example.com

	Sandbox Accounts:
		Account Name								Type		Country	Date Created	
		ssshhheeerrrfff@gmail.comPROCESSING			BUSINESS	IL		13 Mar 2020		
		sb-7osh21170963@personal.example.comDEFAULT	PERSONAL	IL		13 Mar 2020		
		sb-g664p1178552@business.example.comDEFAULT	BUSINESS	IL		13 Mar 2020		
		Total records: 3  

	Default Application
		Sandbox account 	sb-g664p1178552@business.example.com
		Client ID 			AZM0eNtSHuuK-A2sbOatn1t-RcrbOxidJ7BNo3N8ZUI4eat29aiVq22mlHbAX5I9-2oPVU5w2Zoovu_C	
		Secret				EG6-dYBDTFNV7Eu2jaXAseio67HoLv4L8v-1IrniLOseiqOWEAmw8wN8hWmQcyy8Em_ZIVoZ5lQX3SBB

	pp_test01
		Sandbox account 		ssshhheeerrrfff@gmail.com
		Client ID:	AVXglvOQg6PmW05BBFFpDLrELO4J-D9CtCd88qBC74x8fVp0EwLhx5-amtjc0krOGEbYnb714aoM6nSU
		Secret:  	EBp97j2gygH4CAnmlKB9JCgySTyG5N4Rm1TnPjc9LtwKdZdIzn1WW6lUF3ZkEELjYWk0YiaBotJ-wE_y

	BUSINESS Account1	
		profile
			Email ID:		ssshhheeerrrfff_api1.gmail.com
			PW:				qqqq1111 
			Phone:			0507742916
		API Credentials
			Username: 		ssshhheeerrrfff_api1.gmail.com		
			Password:		X62YJB6JBC994BTW			
			Signature:		AWDxs9r5j6nEuZbFY3M8CKdHLncDAoR8Z5fgrmw9gld-3U2OaL6PZwwR
			App name: 		pp_test01
		Funding	Bank Account+Credit Card
			Account No:		13381967
			Routing No:		12123
			C. Card No:		4580-4316-1343-2043
			C. Card Type:	VISA
			Expir Date:		04/2025


		PERSONAL Account1	
			profile
				Email ID:	sb-7osh21170963@personal.example.com
				PW:			qqqq1111		
				Phone:		0509175651	
				Account ID: P4N9BCFU5AECL	
			Funding	Bank Account+Credit Card
				Account No:		3593822
				Routing No:		12123
				C. Card No:		4580433388512041
				C. Card Type:	VISA
				Expir Date:		04/2025

		BUSINESS Account 2 

			profile
				Email ID:	sb-g664p1178552@business.example.com	
				PW:			qqqq1111		
				Phone:		0508210281
				Account ID:	V22CWARDNVH4L
			API Credentials
				Username: 	sb-g664p1178552_api1.business.example.com
				Password:	TSMM6KJNTXSGT5H8
				Signature:	AYP6fdX2KVtMNg1tzCTnKl0ltNFlALPhwOPXaLKB-idzQmVJK6NRSd66
				App name: 	Default Application
			Funding	Bank Account+Credit Card
				Account No:		888448100
				Routing No:		12123
				C. Card No:		4580437668461720
				C. Card Type:	VISA
				Expir Date:		04/2025
	
	Sandbox Pathes
		Component				Access through
		Sandbox test site		https://www.sandbox.paypal.com/
		Sandbox > Accounts page	https://developer.paypal.com/developer/accounts
		
		*Just as you track live transactions on the PayPal live site, you track your sandbox transactions on the sandbox test site
		** During the test phase, use the sandbox endpoints and your sandbox account details in each PayPal API request that you make. Create and manage your set of sandbox accounts from the sandbox Accounts page. Use the Sandbox test site to review the transactions associated with the calls you make using your sandbox accounts.
		*** Tip: To review the status of the mock transactions associated with a sandbox account, log in to the sandbox test site with the credentials from any of your sandbox accounts.

	AppID in all requests  
		# Sandbox test AppID: <APP-80W284485P519543T>

	Sandbox account
			ssshhheeerrrfff@gmail.com
		Client ID
			AVXglvOQg6PmW05BBFFpDLrELO4J-D9CtCd88qBC74x8fVp0EwLhx5-amtjc0krOGEbYnb714aoM6nSU
		
			Note: When you generate a new secret, you still maintain the original secret. The maximum number of client secrets is two. A client secret is either in enabled or disabled state.

			Created	Secret	
			Mar 13, 2020	
			Secret
			EBp97j2gygH4CAnmlKB9JCgySTyG5N4Rm1TnPjc9LtwKdZdIzn1WW6lUF3ZkEELjYWk0YiaBotJ-wE_y


		STEPS
		1. add the paypal script into index.html 
			<script
    			src="https://www.paypal.com/sdk/js?client-id=YOUR-CLIENT-ID*">
  			</script>

		  *	At the moment paypal script was added into index.html using sandbox id, for developing, testing and demonstrating with moack credit cards
		  	<script src="https://www.paypal.com/sdk/js?client-id=AVXglvOQg6PmW05BBFFpDLrELO4J-D9CtCd88qBC74x8fVp0EwLhx5-amtjc0krOGEbYnb714aoM6nSU">
  			</script>


 2checkout.com
 ******************************************
 
 Secret Key:  	G2y)H*POsXcWgLqI#_t%
Merchant Code: 	250313017331

API KEYS
Publishable Key: 	34960244-C6CF-42B2-965B-F5A36A174803
Private Key: 		CFAF9F8C-6B79-4F68-9EBA-764846B128A5

Instant Notification Service (INS) secret word: d1963
Buy link secret word: d1963

*************************************************************************************


C:\dor21_dstore>git init  

C:\dor21_dstore>git add .

The file will have its original line end
warning: LF will be replaced by CRLF in 
The file will have its original line end
warning: LF will be replaced by CRLF in 
The file will have its original line end
warning: LF will be replaced by CRLF in 
The file will have its original line end
warning: LF will be replaced by CRLF in 
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in backend/package-lock.json.
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in backend/package.json.
The file will have its original line endings in your working directory
warning: adding embedded git repository: frontend

hint: You've added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint:
hint:   git submodule add <url> frontend
hint:
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint:
hint:   git rm --cached frontend
hint:
hint: See "git help submodule" for more information.

C:\dor21_dstore>git remote add origin https://github.com/doronsherf/proj_final_d_store.git

C:\dor21_dstore>git push -u origin master
error: src refspec master does not match any
error: failed to push some refs to 'https://github.com/doronsherf/proj_final_d_store.git'

C:\dor21_dstore>git push  -f origin master
error: src refspec master does not match any
error: failed to push some refs to 'https://github.com/doronsherf/proj_final_d_store.git'

C:\dor21_dstore>git remote add origin https://github.com/doronsherf/proj_final_d_store.git
fatal: remote origin already exists.

C:\dor21_dstore>git push   origin master
error: src refspec master does not match any
error: failed to push some refs to 'https://github.com/doronsherf/proj_final_d_store.git'

C:\dor21_dstore>git push -f  origin master
error: src refspec master does not match any
error: failed to push some refs to 'https://github.com/doronsherf/proj_final_d_store.git'

C:\dor21_dstore>git commit -m 'commit message 1'
error: pathspec 'message' did not match any file(s) known to git
error: pathspec '1'' did not match any file(s) known to git

C:\dor21_dstore>git pull --rebase origin master
fatal: Updating an unborn branch with changes added to the index.

		